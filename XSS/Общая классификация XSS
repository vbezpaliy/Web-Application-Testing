Общая классификация XSS

Четкой классификации для межсайтового скриптинга не существует, но экспертами по всему миру выделено три основных типа.

Хранимые XSS (постоянные). Один из самых опасных типов уязвимостей, так как позволяет злоумышленнику получить доступ к 
серверу и уже с него управлять вредоносным кодом (удалять, модифицировать). Каждый раз при обращении к сайту выполняется 
заранее загруженный код, работающий в автоматическом режиме. В основном таким уязвимостям подвержены форумы, порталы, блоги, 
где присутствует возможность комментирования в HTML без ограничений. Вредоносные скрипты с легкостью могут быть встроены как в 
текст, так и в картинки, рисунки.

Отраженные XSS (непостоянные). В этом случае вредоносная строчка выступает в роли запроса жертвы к зараженному веб-сайту. 
Работает этот принцип по следующей схеме:

    Злоумышленник заранее создает URL-ссылку, которая будет содержать вредоносный код и отправляет его своей жертве.
    Она направляет этот URL-запрос на сайт (переходит по ссылке).
    Сайт автоматически берет данные из вредоносной строки и подставляет в виде модифицированного URL-ответа жертве.
    В итоге в браузере у жертвы выполняется вредоносный скрипт, который и содержится в ответе, а злоумышленник получает все 
    cookies этого пользователя.

DOM-модели. В этом варианте возможно использование как хранимых XSS, так и отраженных. Суть заключается в следующем:

    Злоумышленник создает URL-адрес, который заранее содержит вредоносный код, и отправляет его по электронной почте или 
    любым другим способом пользователю.
    Человек переходит по этой ссылке, зараженный сайт принимает запрос, исключая вредоносную строку.
    На странице у пользователя выполняется сценарий, в результате чего загружается вредоносный скрипт и злоумышленник получает 
    cookies.

Виды XSS по способу взаимодействия

Так как основная цель злоумышленника – запустить вредоносный скрипт на компьютере жертвы, существует еще и два основных типа 
XSS-атак по способу взаимодействия.

Пассивные. От жертвы требуется определенное действие, чтобы вызвать обработчик событий и запустить вредоносный скрипт в 
установленной форме. Для этого используется социальная инженерия, например отправка электронного письма с призывом перейти по 
ссылке и нажать на определенную область на сайте. Как только пользователь наведет на нужный объект и кликнет по нему, 
запустится вредоносный скрипт. Если же жертва бездействует, код не будет активирован.

Активные. Злоумышленнику не нужно заманивать жертву по специальным ссылкам, так как код встраивается в базах данных или в 
каком-нибудь исполняемом файле на сервере. От пользователя не требуется никакой активности. У форм ввода, как правило, 
установлен специальный обработчик событий, автоматически активирующийся при попадании на эту страничку. 
В итоге все пользователи, перешедшие по этой ссылке, станут жертвами злоумышленника.


XSS принято классифицировать по двум критериям: вектору и способу воздействия. 
Второй как раз и является теми самыми «активная/пассивная», однако с более внятными формулировками: активной является XSS 
не требующая каких-либо лишних действий со стороны пользователя с точки зрения функционала веб-приложения, в отличии от 
пассивной. А по вектору воздействия, XSS делится на отраженную (возвращаемую сервером в ответ на тот же запрос, в котором 
был передан вектор эксплуатации), устойчивую (сохраняемую на сервере и доступную во всех ответах на один и тот же запрос, 
не содержащий вектор эксплуатации) и основанную на объектной модели документа (проведение которой возможно без отправки 
каких-либо запросов на сервер). Таким образом, правильным ответом на вопрос о классификации приведенного примера атаки 
является: «устойчивая-пассивная».

Защита
Типизация данных, основным принципом этапа типизации является как можно меньшее количество объектов строкового типа на его 
выходе. URL, адреса электропочты, дата, время и т.п. после типизации должны представлять из себя объекты конкретных типов, 
отличных от строкового. В виде строк должны быть представлены только те данные, которые на самом деле являются строкой, т.е. 
которые действительно могут содержать произвольный полноалфавитный текст.
Достаточно воспользоваться функцией parse_url() и реализовать проверку появления в элементах полученного массива лишних 
знаков подчеркивания, означающих наличие в исходном URL запрещенных символов (соответственно, завершать типизацию с ошибкой, 
если были обнаружены такие символы или если parse_url() и вовсе вернула FALSE).

Валидация данных тоесть семантика данных должна соответствовать разрешенным критериям, а не наоборот.

Санитизация выходных данных.

ледующие заголовки:

X-Content-Type-Options: nosniff
msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx

X-XSS-Protection: 1; mode=block
msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx

X-Frame-Options: DENY
blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx

X-Content-Security-Policy: [значение данного заголовка необходимо сформировать исходя из технических требований к 
функционалу сайта, в соответствии с dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html]

Strict-Transport-Security: max-age=expireTime
developer.mozilla.org/en/Security/HTTP_Strict_Transport_Security

Добрый день, коллеги.

Планирую 08.08.2019 командировку в Житомир.

Планирую на один день, утром на маршрутке обратно вечером на маршрутке 14.08.2019.

План действий:

1. Провидение обучение по ИБ команде в Винницу.
2. Встреча с рекрутерами, проведение обучение по процессу предоставления доступа к ИС.
3. Встреча с админами согласование вопроса кто к каким информационным сервисам будет предоставлять доступ и 
контролировать их.
4. Тестирование процесса согласования предоставления доступа на новеньких.

Рома, прошу согласовать командировку в Житомир на один день.
