https://firstwiki.ru/index.php/Аудит_безопасности

Содержание [убрать] 
1 Общая информация
2 Сервер взломан
2.1 Взломали сайт
2.1.1 Шаг 1. Выясняем последствия и “глубину” взлома
2.1.2 Шаг 2. Выясняем причины взлома
2.1.3 Шаг 3. Проводим очистку
2.2 Взломали сервер (захватили права пользователя или root)
2.2.1 Шаг 1. Выяснить последствия и “глубину” взлома
2.2.2 Шаг 2. Выяснить причину взлома
2.2.3 Шаг 3. Проводим очистку
3 Сервер не взломан. Аудит безопасности
3.1 Проверка сервера:
3.2 Проблемы безопасности сервера:
3.2.1 Уровень приложений
3.2.2 Уровень операционной системы.
3.2.3 Сетевой уровень
4 Общие рекомендации
4.1 Проверка почтовой очереди
4.2 Проверяем актуальность установленных CMS
4.3 Проверка прав на директории сайта
4.4 Рекомендуемые настройки php
4.5 Использование rkhunter
4.6 Проверка ПО на уязвимости
4.7 Поиск неиспользуемых сервисов
5 Cheat-Sheet
5.1 Устранение последствий взлома сайта
5.2 Устранение последствий взлома сервера
5.3 Аудит безопасности сайтов
5.4 Аудит безопасности сервера
5.5 Уровень приложений
5.6 Уровень ОС
5.7 Сетевой уровень
************************************************************************************************************
https://ualinux.com/en/stream/sovety-po-proverke-i-zashchite-serverov

Советы по проверке и защите серверов
Подозреваете, что Linux-сервер взломан? Уверены, что всё в порядке, но на всякий случай хотите повысить уровень безопасности? Если так – вот несколько простых советов, которые помогут проверить систему на предмет взлома и лучше её защитить.

Проверка
Для того, чтобы узнать, не взломали ли ваш сервер, скажем, работающий под управлением Ubuntu, стоит кое-что проверить.

▍Данные последнего входа в систему

Выясните данные последнего входа в систему. Делается это с помощью команды lastlog.
$>lastlog
▍История команд

Взгляните на историю команд, узнайте, когда именно их вводили:
$>history
Если список команд выводится без даты – настройте соответствующие параметры утилиты history.

▍Журнал auth.log

Следующий способ проверки – просмотр файла /var/log/auth.log. Например, с помощью такой команды:
$>sudo vi /var/log/auth.log
Здесь можно найти список всех, кто пытался подключиться к серверу по SSH.

▍IP-адреса

Для того, чтобы выяснить IP-адреса, с которых подключались к серверу, воспользуйтесь такой командой:
$>zgrep sshd /var/log/auth.log* | grep rhost | sed -re 's/.*rhost=([^ ]+).*/\1/' | sort –u
▍Журналы Apache

Проверьте журналы Apache:
$>sudo vi /var/log/apache2/access.log
$>sudo vi /var/log/apache2/error.log
▍Поиск подозрительных процессов

Если вы уверены в том, что сервер взломан, разыщите процесс злоумышленника. Например, список всех процессов можно получить такой командой:
$>ps aux | less
▍Список заданий cron

Анализируя сервер на предмет взлома, полезно будет проверить список заданий cron, в который злоумышленник вполне мог добавить что-то своё.
$>crontab -l | grep -v ‘^#’
Независимо от того, выявила ли проверка попытки взлома, безопасности много не бывает. Поэтому вот – несколько советов по защите сервера.
Защита
Рекомендации по защите сервера, в основном, касаются отслеживания и блокирования подозрительной активности, а также регулярного обновления программного обеспечения.

▍Запрет входа root-пользователей по SSH

Для повышения уровня безопасности сервера стоит запретить вход root-пользователей по SSH. 
$>sudo vi /etc/ssh/sshd_config
PermitRootLogin no
▍Автоматические обновления

Включите автоматические обновления безопасности с использованием пакета unattended-upgrades. Сначала его надо установить:
$>sudo apt-get install unattended-upgrades
Следующий шаг – настройка:
$>sudo dpkg-reconfigure -plow unattended-upgrades
Пакет можно вызвать и самостоятельно:
$>sudo unattended-upgrade
▍Настройка блокировок

Установите пакет fail2ban. Для того, чтобы блокировать с его помощью подозрительных SSH-пользователей, воспользуйтесь этим руководством, поле чего настройте систему отчётов.
Для того, чтобы узнать, сколько раз fail2ban заблокировал некий IP-адрес, воспользуйтесь такой командой:
$>sudo awk '($(NF-1) = /Ban/){print $NF}' /var/log/fail2ban.log | sort | uniq -c | sort –n
Для того, чтобы просмотреть весь файл журнала fail2ban, введите следующее:
$>sudo zgrep -h "Ban "/var/log/fail2ban.log* | awk '{print $NF}' | sort | uniq –c
Для поиска проблемных подсетей подойдёт такая команда:
$>sudo zgrep -h "Ban " /var/log/fail2ban.log* | awk '{print $NF}' | awk -F\. '{print $1"."$2"."}' | sort | uniq -c | sort -n | tail
Если анализ файлов журнала показывает, что атаки из некоторой подсети происходят регулярно, её можно заблокировать на постоянной основе. Перед этим, однако, стоит проверить, к какой стране принадлежит подсеть.

Например, вот как заблокировать подключения к sshd-порту из подсети 221.229.*.*:
$>sudo iptables -I INPUT -p tcp -s 221.229.0.0/255.255.0.0 --dport ssh -j REJECT --reject-with tcp-reset
Для того, чтобы узнать о том, что именно было заблокировано правилами iptables, можно воспользоваться такой командой:
$>sudo iptables -vnL INPUT --line-numbers
Для того, чтобы правила iptables сохранялись после перезагрузки сервера, установите в Ubuntu пакет iptables-persistent.
$>sudo apt-get install iptables-persistent
$>cat /etc/iptables/rules.v4
Если вы отредактировали правила iptables, используйте такую команду:
$>sudo bash -c "iptables-save  > /etc/iptables/rules.v4"
Файл с правилами не рекомендуется править вручную, так как его формат важен для того, чтобы всё работало как надо.

--------------------------------------------------------------------------------------------------

ПРОВЕРКА LINUX НА ВИРУСЫ

https://losst.ru/proverka-linux-na-virusy

